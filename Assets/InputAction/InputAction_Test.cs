//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputAction/InputActionTest.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputAction_Test: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputAction_Test()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActionTest"",
    ""maps"": [
        {
            ""name"": ""PlayerActionTest"",
            ""id"": ""63872ff8-2ddf-43e4-a809-fc5212c14383"",
            ""actions"": [
                {
                    ""name"": ""PlayerMoveTest"",
                    ""type"": ""Value"",
                    ""id"": ""c96b5bca-984d-4efb-adda-1b00eff1e2f3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PlayerAttackTest"",
                    ""type"": ""Button"",
                    ""id"": ""5a91f387-7d13-4da5-bb7f-6094a8e0b3aa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CursorPosition"",
                    ""type"": ""Value"",
                    ""id"": ""367d19c0-1a8d-482b-97e1-e83e48926948"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9824c2a9-4124-4cb5-af97-6ef00bf94493"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMoveTest"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""f07a64b9-1ed8-420b-a59c-6a6a2fa55497"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMoveTest"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""00618051-f901-4edf-bc2e-09891061b9a1"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMoveTest"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""af0e8c56-abfc-4c6f-b720-202a12198e70"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMoveTest"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""df80f71e-a2bf-4009-b4ca-8a2259c564db"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMoveTest"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9f35754f-60e0-4460-b8a2-5e96778ae3b1"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMoveTest"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""6b25270a-e3dc-4fd5-af83-34cec5246f54"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerAttackTest"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""60cfc18f-0335-42e3-9437-a1389974e173"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CursorPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerActionTest
        m_PlayerActionTest = asset.FindActionMap("PlayerActionTest", throwIfNotFound: true);
        m_PlayerActionTest_PlayerMoveTest = m_PlayerActionTest.FindAction("PlayerMoveTest", throwIfNotFound: true);
        m_PlayerActionTest_PlayerAttackTest = m_PlayerActionTest.FindAction("PlayerAttackTest", throwIfNotFound: true);
        m_PlayerActionTest_CursorPosition = m_PlayerActionTest.FindAction("CursorPosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerActionTest
    private readonly InputActionMap m_PlayerActionTest;
    private List<IPlayerActionTestActions> m_PlayerActionTestActionsCallbackInterfaces = new List<IPlayerActionTestActions>();
    private readonly InputAction m_PlayerActionTest_PlayerMoveTest;
    private readonly InputAction m_PlayerActionTest_PlayerAttackTest;
    private readonly InputAction m_PlayerActionTest_CursorPosition;
    public struct PlayerActionTestActions
    {
        private @InputAction_Test m_Wrapper;
        public PlayerActionTestActions(@InputAction_Test wrapper) { m_Wrapper = wrapper; }
        public InputAction @PlayerMoveTest => m_Wrapper.m_PlayerActionTest_PlayerMoveTest;
        public InputAction @PlayerAttackTest => m_Wrapper.m_PlayerActionTest_PlayerAttackTest;
        public InputAction @CursorPosition => m_Wrapper.m_PlayerActionTest_CursorPosition;
        public InputActionMap Get() { return m_Wrapper.m_PlayerActionTest; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActionTestActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActionTestActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionTestActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionTestActionsCallbackInterfaces.Add(instance);
            @PlayerMoveTest.started += instance.OnPlayerMoveTest;
            @PlayerMoveTest.performed += instance.OnPlayerMoveTest;
            @PlayerMoveTest.canceled += instance.OnPlayerMoveTest;
            @PlayerAttackTest.started += instance.OnPlayerAttackTest;
            @PlayerAttackTest.performed += instance.OnPlayerAttackTest;
            @PlayerAttackTest.canceled += instance.OnPlayerAttackTest;
            @CursorPosition.started += instance.OnCursorPosition;
            @CursorPosition.performed += instance.OnCursorPosition;
            @CursorPosition.canceled += instance.OnCursorPosition;
        }

        private void UnregisterCallbacks(IPlayerActionTestActions instance)
        {
            @PlayerMoveTest.started -= instance.OnPlayerMoveTest;
            @PlayerMoveTest.performed -= instance.OnPlayerMoveTest;
            @PlayerMoveTest.canceled -= instance.OnPlayerMoveTest;
            @PlayerAttackTest.started -= instance.OnPlayerAttackTest;
            @PlayerAttackTest.performed -= instance.OnPlayerAttackTest;
            @PlayerAttackTest.canceled -= instance.OnPlayerAttackTest;
            @CursorPosition.started -= instance.OnCursorPosition;
            @CursorPosition.performed -= instance.OnCursorPosition;
            @CursorPosition.canceled -= instance.OnCursorPosition;
        }

        public void RemoveCallbacks(IPlayerActionTestActions instance)
        {
            if (m_Wrapper.m_PlayerActionTestActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActionTestActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionTestActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionTestActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActionTestActions @PlayerActionTest => new PlayerActionTestActions(this);
    public interface IPlayerActionTestActions
    {
        void OnPlayerMoveTest(InputAction.CallbackContext context);
        void OnPlayerAttackTest(InputAction.CallbackContext context);
        void OnCursorPosition(InputAction.CallbackContext context);
    }
}
